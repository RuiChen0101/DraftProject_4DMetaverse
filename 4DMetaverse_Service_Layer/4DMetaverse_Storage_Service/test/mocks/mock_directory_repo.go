// Code generated by MockGen. DO NOT EDIT.
// Source: 4dmetaverse/storage_service/internal/repository (interfaces: DirectoryRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "4dmetaverse/storage_service/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDirectoryRepo is a mock of DirectoryRepo interface.
type MockDirectoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryRepoMockRecorder
}

// MockDirectoryRepoMockRecorder is the mock recorder for MockDirectoryRepo.
type MockDirectoryRepoMockRecorder struct {
	mock *MockDirectoryRepo
}

// NewMockDirectoryRepo creates a new mock instance.
func NewMockDirectoryRepo(ctrl *gomock.Controller) *MockDirectoryRepo {
	mock := &MockDirectoryRepo{ctrl: ctrl}
	mock.recorder = &MockDirectoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryRepo) EXPECT() *MockDirectoryRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDirectoryRepo) Create(arg0 *entity.Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDirectoryRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDirectoryRepo)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockDirectoryRepo) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDirectoryRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDirectoryRepo)(nil).Delete), arg0)
}

// FindByFullPath mocks base method.
func (m *MockDirectoryRepo) FindByFullPath(arg0, arg1 string) (*entity.Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFullPath", arg0, arg1)
	ret0, _ := ret[0].(*entity.Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFullPath indicates an expected call of FindByFullPath.
func (mr *MockDirectoryRepoMockRecorder) FindByFullPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFullPath", reflect.TypeOf((*MockDirectoryRepo)(nil).FindByFullPath), arg0, arg1)
}

// FindById mocks base method.
func (m *MockDirectoryRepo) FindById(arg0 uint64) (*entity.Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*entity.Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockDirectoryRepoMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockDirectoryRepo)(nil).FindById), arg0)
}

// FindByNativeSQL mocks base method.
func (m *MockDirectoryRepo) FindByNativeSQL(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNativeSQL", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// FindByNativeSQL indicates an expected call of FindByNativeSQL.
func (mr *MockDirectoryRepoMockRecorder) FindByNativeSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNativeSQL", reflect.TypeOf((*MockDirectoryRepo)(nil).FindByNativeSQL), arg0)
}

// ListByParentId mocks base method.
func (m *MockDirectoryRepo) ListByParentId(arg0 *uint64) ([]entity.Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByParentId", arg0)
	ret0, _ := ret[0].([]entity.Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByParentId indicates an expected call of ListByParentId.
func (mr *MockDirectoryRepoMockRecorder) ListByParentId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByParentId", reflect.TypeOf((*MockDirectoryRepo)(nil).ListByParentId), arg0)
}

// ListByPathPrefix mocks base method.
func (m *MockDirectoryRepo) ListByPathPrefix(arg0 string) ([]entity.Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPathPrefix", arg0)
	ret0, _ := ret[0].([]entity.Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPathPrefix indicates an expected call of ListByPathPrefix.
func (mr *MockDirectoryRepoMockRecorder) ListByPathPrefix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPathPrefix", reflect.TypeOf((*MockDirectoryRepo)(nil).ListByPathPrefix), arg0)
}

// Update mocks base method.
func (m *MockDirectoryRepo) Update(arg0 uint64, arg1 *entity.Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDirectoryRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDirectoryRepo)(nil).Update), arg0, arg1)
}
