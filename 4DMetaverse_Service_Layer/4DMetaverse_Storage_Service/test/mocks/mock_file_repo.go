// Code generated by MockGen. DO NOT EDIT.
// Source: 4dmetaverse/storage_service/internal/repository (interfaces: FileRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "4dmetaverse/storage_service/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileRepo is a mock of FileRepo interface.
type MockFileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepoMockRecorder
}

// MockFileRepoMockRecorder is the mock recorder for MockFileRepo.
type MockFileRepoMockRecorder struct {
	mock *MockFileRepo
}

// NewMockFileRepo creates a new mock instance.
func NewMockFileRepo(ctrl *gomock.Controller) *MockFileRepo {
	mock := &MockFileRepo{ctrl: ctrl}
	mock.recorder = &MockFileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepo) EXPECT() *MockFileRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileRepo) Create(arg0 *entity.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFileRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileRepo)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockFileRepo) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileRepo)(nil).Delete), arg0)
}

// FindById mocks base method.
func (m *MockFileRepo) FindById(arg0 string) (*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockFileRepoMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockFileRepo)(nil).FindById), arg0)
}

// FindByNativeSQL mocks base method.
func (m *MockFileRepo) FindByNativeSQL(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNativeSQL", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// FindByNativeSQL indicates an expected call of FindByNativeSQL.
func (mr *MockFileRepoMockRecorder) FindByNativeSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNativeSQL", reflect.TypeOf((*MockFileRepo)(nil).FindByNativeSQL), arg0)
}

// FindByPath mocks base method.
func (m *MockFileRepo) FindByPath(arg0, arg1 string) (*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPath", arg0, arg1)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPath indicates an expected call of FindByPath.
func (mr *MockFileRepoMockRecorder) FindByPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPath", reflect.TypeOf((*MockFileRepo)(nil).FindByPath), arg0, arg1)
}

// ListByDirId mocks base method.
func (m *MockFileRepo) ListByDirId(arg0 uint64) ([]entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByDirId", arg0)
	ret0, _ := ret[0].([]entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByDirId indicates an expected call of ListByDirId.
func (mr *MockFileRepoMockRecorder) ListByDirId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByDirId", reflect.TypeOf((*MockFileRepo)(nil).ListByDirId), arg0)
}

// Update mocks base method.
func (m *MockFileRepo) Update(arg0 string, arg1 *entity.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFileRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFileRepo)(nil).Update), arg0, arg1)
}
