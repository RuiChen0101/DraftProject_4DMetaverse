// Code generated by MockGen. DO NOT EDIT.
// Source: 4dmetaverse/storage_service/internal/repository (interfaces: AccessRecordRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "4dmetaverse/storage_service/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccessRecordRepo is a mock of AccessRecordRepo interface.
type MockAccessRecordRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccessRecordRepoMockRecorder
}

// MockAccessRecordRepoMockRecorder is the mock recorder for MockAccessRecordRepo.
type MockAccessRecordRepoMockRecorder struct {
	mock *MockAccessRecordRepo
}

// NewMockAccessRecordRepo creates a new mock instance.
func NewMockAccessRecordRepo(ctrl *gomock.Controller) *MockAccessRecordRepo {
	mock := &MockAccessRecordRepo{ctrl: ctrl}
	mock.recorder = &MockAccessRecordRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessRecordRepo) EXPECT() *MockAccessRecordRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccessRecordRepo) Create(arg0 *entity.AccessRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccessRecordRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessRecordRepo)(nil).Create), arg0)
}

// FindByNativeSQL mocks base method.
func (m *MockAccessRecordRepo) FindByNativeSQL(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNativeSQL", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// FindByNativeSQL indicates an expected call of FindByNativeSQL.
func (mr *MockAccessRecordRepoMockRecorder) FindByNativeSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNativeSQL", reflect.TypeOf((*MockAccessRecordRepo)(nil).FindByNativeSQL), arg0)
}
