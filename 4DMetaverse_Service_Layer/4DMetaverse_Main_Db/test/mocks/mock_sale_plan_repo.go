// Code generated by MockGen. DO NOT EDIT.
// Source: 4dmetaverse/main_db/internal/repository (interfaces: SalePlanRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "4dmetaverse/main_db/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSalePlanRepo is a mock of SalePlanRepo interface.
type MockSalePlanRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSalePlanRepoMockRecorder
}

// MockSalePlanRepoMockRecorder is the mock recorder for MockSalePlanRepo.
type MockSalePlanRepoMockRecorder struct {
	mock *MockSalePlanRepo
}

// NewMockSalePlanRepo creates a new mock instance.
func NewMockSalePlanRepo(ctrl *gomock.Controller) *MockSalePlanRepo {
	mock := &MockSalePlanRepo{ctrl: ctrl}
	mock.recorder = &MockSalePlanRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalePlanRepo) EXPECT() *MockSalePlanRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSalePlanRepo) Create(arg0 *entity.SalePlan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSalePlanRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSalePlanRepo)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockSalePlanRepo) Delete(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSalePlanRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSalePlanRepo)(nil).Delete), arg0)
}

// FindById mocks base method.
func (m *MockSalePlanRepo) FindById(arg0 uuid.UUID) (*entity.SalePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*entity.SalePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSalePlanRepoMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSalePlanRepo)(nil).FindById), arg0)
}

// FindByNativeSQL mocks base method.
func (m *MockSalePlanRepo) FindByNativeSQL(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNativeSQL", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// FindByNativeSQL indicates an expected call of FindByNativeSQL.
func (mr *MockSalePlanRepoMockRecorder) FindByNativeSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNativeSQL", reflect.TypeOf((*MockSalePlanRepo)(nil).FindByNativeSQL), arg0)
}

// FindDefaultSalePlan mocks base method.
func (m *MockSalePlanRepo) FindDefaultSalePlan(arg0 uuid.UUID) (*entity.SalePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDefaultSalePlan", arg0)
	ret0, _ := ret[0].(*entity.SalePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDefaultSalePlan indicates an expected call of FindDefaultSalePlan.
func (mr *MockSalePlanRepoMockRecorder) FindDefaultSalePlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDefaultSalePlan", reflect.TypeOf((*MockSalePlanRepo)(nil).FindDefaultSalePlan), arg0)
}

// SetCollections mocks base method.
func (m *MockSalePlanRepo) SetCollections(arg0 uuid.UUID, arg1 []entity.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCollections", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCollections indicates an expected call of SetCollections.
func (mr *MockSalePlanRepoMockRecorder) SetCollections(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCollections", reflect.TypeOf((*MockSalePlanRepo)(nil).SetCollections), arg0, arg1)
}

// Update mocks base method.
func (m *MockSalePlanRepo) Update(arg0 uuid.UUID, arg1 *entity.SalePlan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSalePlanRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSalePlanRepo)(nil).Update), arg0, arg1)
}
