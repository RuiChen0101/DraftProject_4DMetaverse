// Code generated by MockGen. DO NOT EDIT.
// Source: 4dmetaverse/main_db/internal/repository (interfaces: ShopImageRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "4dmetaverse/main_db/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockShopImageRepo is a mock of ShopImageRepo interface.
type MockShopImageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockShopImageRepoMockRecorder
}

// MockShopImageRepoMockRecorder is the mock recorder for MockShopImageRepo.
type MockShopImageRepoMockRecorder struct {
	mock *MockShopImageRepo
}

// NewMockShopImageRepo creates a new mock instance.
func NewMockShopImageRepo(ctrl *gomock.Controller) *MockShopImageRepo {
	mock := &MockShopImageRepo{ctrl: ctrl}
	mock.recorder = &MockShopImageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopImageRepo) EXPECT() *MockShopImageRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockShopImageRepo) Create(arg0 *entity.ShopImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockShopImageRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShopImageRepo)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockShopImageRepo) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockShopImageRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShopImageRepo)(nil).Delete), arg0)
}

// FindById mocks base method.
func (m *MockShopImageRepo) FindById(arg0 uint64) (*entity.ShopImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*entity.ShopImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockShopImageRepoMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockShopImageRepo)(nil).FindById), arg0)
}

// FindByNativeSQL mocks base method.
func (m *MockShopImageRepo) FindByNativeSQL(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNativeSQL", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// FindByNativeSQL indicates an expected call of FindByNativeSQL.
func (mr *MockShopImageRepoMockRecorder) FindByNativeSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNativeSQL", reflect.TypeOf((*MockShopImageRepo)(nil).FindByNativeSQL), arg0)
}

// FindCoverImage mocks base method.
func (m *MockShopImageRepo) FindCoverImage(arg0 uuid.UUID) (*entity.ShopImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCoverImage", arg0)
	ret0, _ := ret[0].(*entity.ShopImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCoverImage indicates an expected call of FindCoverImage.
func (mr *MockShopImageRepoMockRecorder) FindCoverImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCoverImage", reflect.TypeOf((*MockShopImageRepo)(nil).FindCoverImage), arg0)
}

// Update mocks base method.
func (m *MockShopImageRepo) Update(arg0 uint64, arg1 *entity.ShopImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockShopImageRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockShopImageRepo)(nil).Update), arg0, arg1)
}
